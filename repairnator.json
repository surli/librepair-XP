{
  "totalNumberSkippingTests": 339,
  "step-durations": {
    "CheckoutBuild": 2,
    "": 0,
    "ComputeClasspath": 3,
    "CloneRepository": 4,
    "NopolRepair": 1295,
    "ResolveDependency": 167,
    "TestProject": 292,
    "BuildProject": 69,
    "PushIncriminatedBuild": 5,
    "ComputeSourceDir": 0,
    "SquashRepository": 2
  },
  "nbLibraries": 61,
  "workspace": "./workspace",
  "totalNumberErroringTests": 6978,
  "repo": "spring-projects/spring-data-redis",
  "bugCommit": "https://github.com/spring-projects/spring-data-redis/compare/c57cdbc6e971^...2c6a5c26eee6",
  "failingModule": "/root/workspace/spring-projects/spring-data-redis/221243543",
  "buildid": 221243543,
  "totalNumberFailingTests": 0,
  "error-types": [
    "org.springframework.data.redis.connection.PoolException",
    "org.junit.AssumptionViolatedException",
    "org.springframework.data.redis.RedisConnectionFailureException",
    "org.springframework.beans.factory.BeanCreationException",
    "com.lambdaworks.redis.RedisConnectionException",
    "java.lang.NoClassDefFoundError",
    "java.lang.Exception",
    "java.lang.ExceptionInInitializerError",
    "skipped"
  ],
  "totalNumberRunningTests": 9030,
  "failing-test-cases": [
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
      "failingMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hGetShouldReturnValueForExistingField[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hMGetShouldReturnNullValueForFieldsThatHaveNoValue[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hLenShouldReturnSizeCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hSetNxShouldReturnFalseIfFieldAlreadyExists[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hExistsShouldReturnTrueForExistingField[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hDelShouldRemoveSingleFieldsCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hGetAllShouldReturnEntriesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hKeysShouldReturnFieldsCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hDelShouldRemoveMultipleFieldsCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hMGetShouldReturnValueForFields[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hSetShouldOperateCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hMSetSouldSetValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hValsShouldReturnValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hGetShouldReturnNullForNotExistingField[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hExistsShouldReturnFalseForNonExistingField[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hSetNxShouldOperateCorrectly[Cluster]"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hGetShouldReturnNullForNotExistingField[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hDelShouldRemoveMultipleFieldsCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hGetAllShouldReturnEntriesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hLenShouldReturnSizeCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hMGetShouldReturnValueForFields[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hValsShouldReturnValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hGetShouldReturnValueForExistingField[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hKeysShouldReturnFieldsCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hMSetSouldSetValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hDelShouldRemoveSingleFieldsCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hExistsShouldReturnTrueForExistingField[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hSetShouldOperateCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hMGetShouldReturnNullValueForFieldsThatHaveNoValue[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hExistsShouldReturnFalseForNonExistingField[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hSetNxShouldOperateCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests#hSetNxShouldReturnFalseIfFieldAlreadyExists[Standalone]"
      ],
      "failures": [
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        }
      ],
      "nbFailures": 16,
      "nbErrors": 16
    },
    {
      "className": "org.springframework.data.redis.core.DefaultHyperLogLogOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultHyperLogLogOperationsTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests#listenerShouldNotReactToDeleteEvents",
        "org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests#listenerShouldPublishEventCorrectly"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests#saveAndFindUnqualified",
        "org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests#saveAndFindQualified"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests#org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.core.script.AbstractDefaultScriptExecutorTests",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#findReturnsPageCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#findUsingOrReturnsResultCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#nearQueryShouldReturnResultsCorrectlyOnNestedProperty",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyTopKeywordCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldReturnEmptyListWhenPageableOutOfBoundsUsingQueryMethod",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#findReturnsReferenceDataCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#nearQueryShouldReturnResultsCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyPageableCorrectlyWhenUsingFindAll",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyFirstKeywordCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldReturnEmptyListWhenPageableOutOfBoundsUsingFindAll",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyPageableCorrectlyWhenUsingFindByWithoutCriteria",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#nearQueryShouldFindNothingIfOutOfRange",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyTopKeywordCorrectlyWhenCriteriaPresent",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#simpleFindShouldReturnEntitiesCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#simpleFindByMultipleProperties"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 15
    },
    {
      "className": "org.springframework.data.redis.support.BoundKeyOperationsTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.BoundKeyOperationsTest#initializationError"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.listener.PubSubResubscribeTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.listener.PubSubResubscribeTests#org.springframework.data.redis.listener.PubSubResubscribeTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests#org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
      "failingMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testConnectWithPassword",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testLotsOfConnections"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetNewConnectionOnError",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#factoryShouldReturnReactiveConnectionWhenCorrectly",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testConnectionErrorNoValidate",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetConnectionNotSharedBadHostname",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetSharedConnectionNotShared",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testSelectDb",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testCreateFactoryWithPool",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testValidateNoError",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testResetAndInitConnection",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testResetConnection",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#factoryWorksWithoutClientResources",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testDisableSharedConnection",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#dbIndexShouldBePropagatedCorrectly",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testInitConnection",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetConnectionException"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "Redis must have requirepass set to run this test",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "Uncomment this test to manually check connection reuse in a pool scenario",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 15
    },
    {
      "className": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#keys[raw]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#values[raw]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#delete[raw]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#hasKey[String]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#put[String]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#incrementDouble[raw]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#multiGet[raw]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#putAll[String]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#entries[raw]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#keys[String]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#size[String]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#increment[raw]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#hasKey[raw]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#values[String]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#get[String]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#incrementDouble[String]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#delete[String]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#putIfAbsent[String]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#size[raw]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#putAll[raw]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#increment[String]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#remove[raw]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#entries[String]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#get[raw]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#remove[String]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#putIfAbsent[raw]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#multiGet[String]",
        "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests#put[raw]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 28
    },
    {
      "className": "org.springframework.data.redis.listener.PubSubTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.listener.PubSubTests#org.springframework.data.redis.listener.PubSubTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisSetTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[3]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 330
    },
    {
      "className": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfPresent[Long]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setRange[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#size[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfAbsent[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#size[Long]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setRange[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getAndSet[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#size[String]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setWithExpiry[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#append[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#set[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#append[raw]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSet[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfPresent[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiGet[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getAndSet[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#size[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#get[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#get[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfPresent[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#get[Double]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#delete[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getRange[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#delete[Double]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getRange[String]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setBit[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#size[Double]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#delete[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#delete[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#delete[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getBit[String]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#get[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSet[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getAndSet[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSet[Long]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#get[String]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getBit[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiGet[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getAndSet[Long]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#delete[String]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiGet[String]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setBit[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setBit[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getBit[Double]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSet[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#append[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#set[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setWithExpiry[Double]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfAbsent[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#append[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setBit[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setRange[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#get[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#set[Double]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#append[String]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfAbsent[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getBit[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setRange[Double]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfAbsent[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setBit[Double]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getAndSet[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiGet[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getRange[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#get[raw]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#size[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSet[Double]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSetIfAbsent[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSetIfAbsent[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfPresent[raw]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setWithExpiry[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getBit[raw]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiGet[Long]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#set[raw]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSetIfAbsent[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfAbsent[String]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setWithExpiry[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setBit[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#get[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#delete[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfAbsent[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getBit[Long]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getRange[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#delete[raw]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#append[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSet[String]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setRange[Long]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setBit[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#set[Long]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#get[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSetIfAbsent[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getRange[Long]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfAbsent[Double]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSet[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#size[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#size[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getAndSet[String]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfPresent[Double]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#set[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getBit[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSetIfAbsent[Double]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfAbsent[Long]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSetIfAbsent[Long]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setRange[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setBit[raw]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#size[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setRange[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setBit[Long]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#append[Long]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setWithExpiry[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiGet[Double]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#append[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getRange[raw]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#set[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getRange[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSet[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getAndSet[raw]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfPresent[String]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getAndSet[Double]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getBit[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSetIfAbsent[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getAndSet[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSet[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getRange[Double]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setWithExpiry[raw]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setRange[String]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfAbsent[raw]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSetIfAbsent[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setBit[String]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfAbsent[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#set[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#get[Long]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#append[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfPresent[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getBit[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#size[raw]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setRange[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#delete[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfPresent[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#delete[Long]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#set[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfPresent[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setIfPresent[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setWithExpiry[Long]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setRange[raw]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSet[raw]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getAndSet[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiGet[raw]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setWithExpiry[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getRange[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getBit[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiGet[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiGet[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiGet[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#getRange[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#append[Double]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setWithExpiry[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#set[String]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSetIfAbsent[raw]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#multiSetIfAbsent[String]",
        "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests#setWithExpiry[String]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 160
    },
    {
      "className": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexType[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveAndSetItToMinusOnelIfPersisted[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdate[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexTypedList[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateShouldLeaveIndexesNotInvolvedInUpdateUntouched[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectType[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleType[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleTypedList[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#updateShouldAlterIndexesCorrectlyWhenValuesGetRemovedFromHash[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#savesObjectCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLive[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningSingleIdCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningMultipleIdsCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveToPrimitiveField[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleTypedMap[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectTypedList[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveWhenFetchingList[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectTypedMap[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningNullCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexTypedMap[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleType[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveAndSetItToMinusOnelIfPersisted[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexType[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectType[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateShouldLeaveIndexesNotInvolvedInUpdateUntouched[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleTypedList[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdate[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#updateShouldAlterIndexesCorrectlyWhenValuesGetRemovedFromHash[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningSingleIdCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningMultipleIdsCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectTypedList[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLive[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleTypedMap[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectTypedMap[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveWhenFetchingList[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#savesObjectCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexTypedList[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningNullCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexTypedMap[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveToPrimitiveField[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 80
    },
    {
      "className": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#size[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rank[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#remove[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScoresWithLimit[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#size[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRangeByScore[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rank[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#count[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLex[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLex[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLexWithLimit[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#count[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#add[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#intersectAndStore[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#incrementScore[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rank[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#unionAndStore[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#count[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeWithScores[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScores[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#size[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRange[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#score[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#add[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLexWithLimit[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRange[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#remove[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#add[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRange[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#score[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScoresWithLimit[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLexWithLimit[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rank[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScoresWithLimit[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithLimit[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLexLimit[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRank[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#delete[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#count[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#size[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#count[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRangeByScore[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#unionAndStore[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithLimit[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRangeByScore[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLex[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScores[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#incrementScore[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRank[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScore[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScoresWithLimit[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#intersectAndStore[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithLimit[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScores[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#incrementScore[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLex[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRangeByScore[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScores[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScores[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#size[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#addAll[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#score[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScores[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLexWithLimit[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScoresWithLimit[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRange[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLex[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLex[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#delete[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLex[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRangeByScore[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLex[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScore[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScore[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#unionAndStore[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScoresWithLimit[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScores[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rank[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#size[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLex[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#intersectAndStore[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#addAll[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScore[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#intersectAndStore[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLex[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLex[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRange[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#range[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithLimit[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRange[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#unionAndStore[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#count[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLexLimit[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScore[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScores[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#size[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRange[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLexLimit[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScores[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithLimit[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScores[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScore[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithLimit[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#unionAndStore[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#delete[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#incrementScore[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRange[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#range[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLex[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScoresWithLimit[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#score[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#range[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithLimit[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#score[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScores[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#addAll[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#unionAndStore[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScores[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRange[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#score[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#range[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRange[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScoresWithLimit[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#remove[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithLimit[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#addAll[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeWithScores[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeWithScores[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#remove[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLexLimit[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRangeByScore[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScoresWithLimit[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#add[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#score[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRank[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScoresWithLimit[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLexWithLimit[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#add[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLexWithLimit[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRange[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeWithScores[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScores[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#range[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRange[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#addAll[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#size[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeWithScores[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLexWithLimit[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#delete[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLexLimit[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#range[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#delete[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScore[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeWithScores[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLex[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithLimit[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#unionAndStore[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#score[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRank[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeWithScores[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRange[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLexLimit[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithLimit[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithLimit[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeWithScores[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#intersectAndStore[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#addAll[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRangeByScore[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScoresWithLimit[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLex[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeWithScores[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScore[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScores[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLexWithLimit[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScore[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#range[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#range[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScores[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLex[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#range[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#addAll[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScore[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#delete[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScoresWithLimit[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScoresWithLimit[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithLimit[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeWithScores[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#intersectAndStore[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRangeByScore[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#remove[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRange[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScoresWithLimit[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScore[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#count[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithLimit[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLex[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScore[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#count[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScoresWithLimit[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLex[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLexWithLimit[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithLimit[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRank[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRange[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rank[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeWithScores[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRank[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScore[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithLimit[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rank[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#intersectAndStore[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#range[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLexLimit[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRank[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScoresWithLimit[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScore[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#delete[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#unionAndStore[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithLimit[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRange[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLexWithLimit[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#incrementScore[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLex[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScore[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#addAll[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#remove[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#delete[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#incrementScore[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScores[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeWithScores[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#delete[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#intersectAndStore[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLex[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRange[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithLimit[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRange[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScores[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#score[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScore[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeWithScores[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLexLimit[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRangeByScore[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRange[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rank[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeWithScores[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#add[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithLimit[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#count[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#delete[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#add[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScores[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithLimit[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#intersectAndStore[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#score[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#remove[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScores[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRank[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#addAll[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRank[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeWithScores[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScore[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#removeRangeByScore[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeWithScores[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#count[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRange[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#incrementScore[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLexLimit[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#remove[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScoresWithLimit[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithLimit[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScores[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeWithScores[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#remove[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeWithScores[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#size[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#intersectAndStore[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#add[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rank[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#incrementScore[Double]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#unionAndStore[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#unionAndStore[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScoresWithLimit[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#remove[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#incrementScore[raw]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#incrementScore[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScore[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScoreWithScoresWithLimit[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByScoreWithScoresWithLimit[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rank[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeByLex[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByLexLimit[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeWithScores[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#rangeWithScores[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRank[Long]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScore[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#reverseRangeByScore[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#size[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#add[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#addAll[String]",
        "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests#add[raw]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 300
    },
    {
      "className": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#isMember[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#differenceAndStore[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersect[Double]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#isMember[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#remove[Double]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#members[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#unionAndStore[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#members[raw]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#members[String]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#pop[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#add[Double]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#pop[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#move[Long]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#differenceAndStore[String]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#isMember[Double]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersectAndStore[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersect[raw]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#delete[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersect[String]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#remove[String]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#distinctRandomMembers[String]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#unionAndStore[Long]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#distinctRandomMembers[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#differenceAndStore[Double]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#difference[Double]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersect[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#union[raw]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#unionAndStore[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#add[String]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersect[Long]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMember[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#differenceAndStore[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#members[Long]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#union[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMembers[String]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#move[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#union[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersectAndStore[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#difference[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#add[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#isMember[raw]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMembers[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#distinctRandomMembers[Double]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#move[String]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#distinctRandomMembers[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersectAndStore[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#difference[String]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#delete[raw]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#remove[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#add[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMember[String]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#members[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#difference[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#difference[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#difference[raw]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#members[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersectAndStore[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#move[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#isMember[Long]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#union[String]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#isMember[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersectAndStore[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#distinctRandomMembers[Long]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#add[raw]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#move[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersectAndStore[String]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMember[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#delete[String]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#add[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#delete[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMember[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#pop[Double]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#members[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#distinctRandomMembers[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#add[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#add[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#differenceAndStore[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#union[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#union[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#delete[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#unionAndStore[raw]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#isMember[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#union[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#distinctRandomMembers[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#pop[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersectAndStore[Long]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#delete[Double]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#differenceAndStore[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#difference[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#unionAndStore[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#pop[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#differenceAndStore[raw]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#pop[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMembers[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMember[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#unionAndStore[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#unionAndStore[String]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMembers[Double]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMember[raw]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#isMember[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#delete[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMember[Long]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#difference[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#difference[Long]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#move[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#difference[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#distinctRandomMembers[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#delete[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMembers[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMember[Double]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#remove[Long]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#members[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#remove[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#remove[raw]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#pop[raw]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#remove[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#move[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#delete[Long]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#unionAndStore[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#differenceAndStore[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#pop[String]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersect[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#add[Long]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMembers[raw]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#differenceAndStore[Long]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#unionAndStore[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#union[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#unionAndStore[Double]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#remove[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#delete[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMembers[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersect[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#union[Long]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMembers[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersect[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#differenceAndStore[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMember[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#members[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#add[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#pop[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#remove[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMember[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#move[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#remove[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersect[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMembers[Long]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#move[Double]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersectAndStore[raw]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersectAndStore[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#distinctRandomMembers[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#isMember[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersect[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#members[Double]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#distinctRandomMembers[raw]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#randomMembers[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#union[Double]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#move[raw]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#isMember[String]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#intersectAndStore[Double]",
        "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests#pop[Long]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 160
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
      "failingMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sRemShouldRemoveValues[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sPopShouldReturnNullWhenNotPresent[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sDiffStoreShouldBeExcecutedCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sRandMemberReturnsRandomMember[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sIsMemberShouldReturnFalseWhenValueNotContainedInKey[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sMembersReadsValuesFromSetCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sIsMemberShouldReturnTrueWhenValueContainedInKey[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sInterStoreShouldReturnSizeCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sRandMemberReturnsRandomMembers[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sCardShouldCountValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sRemShouldRemoveSingleValue[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sAddShouldAddValues[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sMoveShouldReturnOperateCorrectlyWhenValueAlreadyPresentInTarget[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sInterShouldIntersectSetsCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sUnionStoreShouldReturnSizeCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sAddShouldAddSingleValue[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sMoveShouldReturnFalseIfValueIsNotAMember[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sUnionShouldCombineSetsCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sPopShouldRetrieveRandomValue[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sDiffShouldBeExcecutedCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sMoveShouldMoveValueCorrectly[Cluster]"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sDiffStoreShouldBeExcecutedCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sUnionStoreShouldReturnSizeCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sUnionShouldCombineSetsCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sPopShouldRetrieveRandomValue[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sMembersReadsValuesFromSetCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sAddShouldAddSingleValue[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sInterShouldIntersectSetsCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sAddShouldAddValues[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sMoveShouldMoveValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sMoveShouldReturnFalseIfValueIsNotAMember[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sRemShouldRemoveSingleValue[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sRandMemberReturnsRandomMember[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sRemShouldRemoveValues[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sIsMemberShouldReturnFalseWhenValueNotContainedInKey[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sPopShouldReturnNullWhenNotPresent[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sMoveShouldReturnOperateCorrectlyWhenValueAlreadyPresentInTarget[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sInterStoreShouldReturnSizeCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sCardShouldCountValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sRandMemberReturnsRandomMembers[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sDiffShouldBeExcecutedCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests#sIsMemberShouldReturnTrueWhenValueContainedInKey[Standalone]"
      ],
      "failures": [
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        }
      ],
      "nbFailures": 21,
      "nbErrors": 21
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
      "failingMethods": [
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[0]"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[0]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 28,
      "nbErrors": 532
    },
    {
      "className": "org.springframework.data.redis.core.DefaultReactiveGeoOperationsIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultReactiveGeoOperationsIntegrationTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#valueOperationSetShouldBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#listOperationLPushShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#listOperationLPushShoudBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#valueOperationSetShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#valueOperationShouldWorkWithReadOnlyTransactions"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.springframework.data.redis.core.DefaultHashOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testHScanReadsValuesFully[1]",
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testDelete[0]",
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testEntries[0]",
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testDelete[1]",
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testEntries[1]",
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testHScanReadsValuesFully[0]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
      "failingMethods": [
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[1]"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[1]"
      ],
      "failures": [
        {
          "failureName": "skipped",
          "failureDetail": "DATAREDIS-108 Test is intermittently failing",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "DATAREDIS-108 Test is intermittently failing",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 26
    },
    {
      "className": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushAll[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPush[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushAll[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPop[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#size[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushWithPivot[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPop[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#delete[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithTimeout[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPush[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushIfPresent[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#set[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPush[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#trim[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushIfPresent[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPushWithTimeout[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPushWithTimeout[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#delete[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#index[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushWithPivot[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPushWithTimeout[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#set[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPush[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithTimeout[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopWithTimeout[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPop[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPush[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushIfPresent[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithTimeout[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithTimeout[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushIfPresent[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushWithPivot[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPush[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushIfPresent[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushAll[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushIfPresent[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPush[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushIfPresent[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#size[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithMillisecondTimeoutShouldFail[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushWithPivot[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPush[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPop[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#trim[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPop[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPop[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithTimeout[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#size[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#delete[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushIfPresent[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#trim[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushIfPresent[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#set[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushWithPivot[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPush[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#size[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopWithTimeout[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#trim[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#set[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPush[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPop[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPush[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPush[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPush[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushWithPivot[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#set[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#remove[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#trim[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPop[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushIfPresent[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPushWithTimeout[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#trim[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushIfPresent[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushIfPresent[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithTimeout[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPushWithTimeout[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#index[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushWithPivot[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#index[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPushWithTimeout[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithMillisecondTimeoutShouldFail[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushAll[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#index[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPushWithTimeout[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPop[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushWithPivot[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#remove[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPush[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithTimeout[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#index[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPop[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#delete[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#index[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushIfPresent[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#set[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithMillisecondTimeoutShouldFail[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushAll[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopWithTimeout[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushAll[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPush[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushWithPivot[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPushWithTimeout[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#remove[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushWithPivot[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushIfPresent[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushAll[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopWithTimeout[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopWithTimeout[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#remove[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPush[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithTimeout[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithMillisecondTimeoutShouldFail[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#trim[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushWithPivot[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPush[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushAll[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPop[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#set[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPop[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPushWithTimeout[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPush[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#index[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#delete[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushAll[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPush[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPush[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushIfPresent[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushIfPresent[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#remove[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushAll[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#set[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPush[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushAll[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithMillisecondTimeoutShouldFail[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithTimeout[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#delete[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushWithPivot[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushWithPivot[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPop[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPush[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithMillisecondTimeoutShouldFail[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#set[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopWithTimeout[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithMillisecondTimeoutShouldFail[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushAll[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPush[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPush[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#index[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopWithTimeout[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPop[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushWithPivot[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithTimeout[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithMillisecondTimeoutShouldFail[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#delete[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPush[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#delete[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushAll[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPop[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#size[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#trim[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#set[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushWithPivot[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPush[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPop[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushAll[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#remove[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#remove[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushAll[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#trim[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopAndLeftPushWithTimeout[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#delete[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPop[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#trim[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#size[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushWithPivot[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopWithTimeout[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#size[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#size[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushAll[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPop[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopWithTimeout[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushAll[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#index[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPush[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#size[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPush[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushWithPivot[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushAll[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#size[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushIfPresent[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushIfPresent[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#remove[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPop[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithMillisecondTimeoutShouldFail[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#remove[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPop[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushWithPivot[Long]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPopWithMillisecondTimeoutShouldFail[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#remove[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPopWithTimeout[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushAll[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushIfPresent[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushIfPresent[String]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#index[Double]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPush[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushWithPivot[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPushWithPivot[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#delete[raw]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#leftPushAll[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests#rightPush[Long]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 210
    },
    {
      "className": "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#valueOperationSetShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#listOperationLPushShoudBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#valueOperationSetShouldBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#listOperationLPushShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#valueOperationShouldWorkWithReadOnlyTransactions"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisMapTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[13]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 464
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
      "failingMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#setRangeShouldReturnNewStringLengthCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#getShouldRetriveValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#strLenShouldReturnValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#setShouldAddValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#bitCountShouldCountInRangeCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#bitOpAndShouldWorkAsExpected[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#getSetShouldReturnPreviousValueCorrectlyWhenNoExists[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#setNXshouldOnlySetValueWhenNotPresent[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#getRangeShouldReturnSubstringCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#mGetShouldRetriveNullValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#getBitShouldReturnValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#getSetShouldReturnPreviousValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#bitOpOrShouldWorkAsExpected[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#setNXshouldNotSetValueWhenAlreadyPresent[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#mSetShouldAddMultipleKeyValueParis[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#getShouldRetriveNullValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#mSetNXShouldAddMultipleKeyValueParis[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#mGetShouldRetriveValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#appendShouldDoItsThing[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#setEXshouldSetKeyAndExpirationTime[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#pSetEXshouldSetKeyAndExpirationTime[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#setBitShouldReturnValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#mSetNXShouldNotAddMultipleKeyValueParisWhenAlreadyExit[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#getShouldRetriveValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#mGetShouldRetriveValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#getShouldRetriveValuesWithNullCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#setShouldAddValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#bitNotShouldThrowExceptionWhenMoreThanOnSourceKey[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#bitCountShouldReturnValueCorrectly[Cluster]"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#getShouldRetriveValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#setRangeShouldReturnNewStringLengthCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#bitCountShouldCountInRangeCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#getShouldRetriveValuesWithNullCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#getBitShouldReturnValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#bitOpOrShouldWorkAsExpected[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#mSetNXShouldAddMultipleKeyValueParis[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#strLenShouldReturnValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#setShouldAddValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#getShouldRetriveNullValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#setShouldAddValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#setEXshouldSetKeyAndExpirationTime[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#mGetShouldRetriveNullValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#setNXshouldNotSetValueWhenAlreadyPresent[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#appendShouldDoItsThing[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#mGetShouldRetriveValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#getShouldRetriveValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#mSetShouldAddMultipleKeyValueParis[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#setNXshouldOnlySetValueWhenNotPresent[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#getSetShouldReturnPreviousValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#pSetEXshouldSetKeyAndExpirationTime[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#getSetShouldReturnPreviousValueCorrectlyWhenNoExists[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#mGetShouldRetriveValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#getRangeShouldReturnSubstringCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#bitNotShouldThrowExceptionWhenMoreThanOnSourceKey[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#bitOpAndShouldWorkAsExpected[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#mSetNXShouldNotAddMultipleKeyValueParisWhenAlreadyExit[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#bitCountShouldReturnValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests#setBitShouldReturnValueCorrectly[Standalone]"
      ],
      "failures": [
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        }
      ],
      "nbFailures": 29,
      "nbErrors": 29
    },
    {
      "className": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#renameNx[raw]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expire[raw]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpire[String/Person/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpireAt[Generic Jackson 2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToHash[Generic Jackson 2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[String/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToValues[String]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToValues[String/Person/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#move[Generic Jackson 2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expireAt[Long]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToHash[raw]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToHash[Jackson2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#move[String]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#renameNx[Jackson2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#move[Jackson2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#type[raw]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToValues[Long]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpireAt[String]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToHash[Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#type[Generic Jackson 2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#exists[String/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToValues[Double]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#rename[raw]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#rename[Generic Jackson 2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpireAt[Double]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expireAt[String/Person/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToValues[String/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expire[Jackson2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[Generic Jackson 2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expire[Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expireAt[raw]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#renameNx[String]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expire[String]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#exists[Jackson2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToValues[Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#exists[Long]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#exists[Double]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#exists[raw]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#renameNx[Generic Jackson 2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForAbsentKeyShouldCompleteWithoutValue[Double]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForAbsentKeyShouldCompleteWithoutValue[raw]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForAbsentKeyShouldCompleteWithoutValue[Generic Jackson 2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[String/Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpire[Jackson2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#exists[Generic Jackson 2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[Double]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#type[String/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToValues[Jackson2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#move[Double]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpire[Double]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#move[raw]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpireAt[String/Person/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expireAt[Double]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForAbsentKeyShouldCompleteWithoutValue[String/Person/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expireAt[String/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expireAt[Jackson2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpireAt[Long]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToHash[Long]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToHash[String/Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#move[String/Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[String]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpire[String]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#type[Double]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#rename[String/Person/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForAbsentKeyShouldCompleteWithoutValue[Long]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#exists[String/Person/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#type[String/Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToHash[Double]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#rename[Double]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[Long]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForAbsentKeyShouldCompleteWithoutValue[String/Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#renameNx[String/Person/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#move[Long]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToHash[String/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpireAt[Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#type[String/Person/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpireAt[String/Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expire[String/Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#move[String/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#type[String]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#renameNx[Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpireAt[Jackson2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpireAt[raw]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#move[String/Person/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#exists[String]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToHash[String]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#rename[String]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpire[String/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[String/Person/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#rename[Long]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#renameNx[String/Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#exists[String/Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expireAt[Generic Jackson 2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[raw]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpire[raw]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expire[Long]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#rename[Jackson2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#type[Long]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpireAt[String/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expireAt[Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[Jackson2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expireAt[String]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#rename[Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForAbsentKeyShouldCompleteWithoutValue[String/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#type[Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expire[String/Person/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToValues[String/Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#move[Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForAbsentKeyShouldCompleteWithoutValue[Jackson2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpire[Long]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#renameNx[Double]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForAbsentKeyShouldCompleteWithoutValue[Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#rename[String/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpire[Generic Jackson 2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expire[Generic Jackson 2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToValues[raw]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expire[String/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expire[Double]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#expireAt[String/Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpire[String/Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToValues[Generic Jackson 2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#type[Jackson2]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#renameNx[Long]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#getTtlForAbsentKeyShouldCompleteWithoutValue[String]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#renameNx[String/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#exists[Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#preciseExpire[Person/JDK]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#shouldApplyCustomSerializationContextToHash[String/Person/OXM]",
        "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests#rename[String/Person/JDK]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 130
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
      "failingMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoPosNonExisting[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoDistShouldReturnDistanceInMetersByDefault[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoHashNotExisting[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoPos[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoRadiusShouldReturnDistanceCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoRadiusByMemberShouldReturnDistanceCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoAddShouldAddSingleGeoLocationCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoRadiusByMemberShouldApplyLimit[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoHash[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoAddShouldAddMultipleGeoLocationsCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoRadiusShouldApplyLimit[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoDistShouldReturnDistanceInDesiredMetric[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoRadiusByMemberShouldReturnMembersCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoRadiusShouldReturnMembersCorrectly[Cluster]"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoRadiusShouldReturnDistanceCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoAddShouldAddSingleGeoLocationCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoHashNotExisting[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoRadiusShouldApplyLimit[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoRadiusByMemberShouldApplyLimit[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoHash[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoPos[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoPosNonExisting[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoRadiusShouldReturnMembersCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoRadiusByMemberShouldReturnMembersCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoDistShouldReturnDistanceInDesiredMetric[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoAddShouldAddMultipleGeoLocationsCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoDistShouldReturnDistanceInMetersByDefault[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests#geoRadiusByMemberShouldReturnDistanceCorrectly[Standalone]"
      ],
      "failures": [
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        }
      ],
      "nbFailures": 14,
      "nbErrors": 14
    },
    {
      "className": "org.springframework.data.redis.core.DefaultValueOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[3]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 305
    },
    {
      "className": "org.springframework.data.redis.core.DefaultGeoOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultGeoOperationsTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisZSetTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[13]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 630
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisListTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[2]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1710
    },
    {
      "className": "org.springframework.data.redis.mapping.Jackson2HashMapperTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.mapping.Jackson2HashMapperTests#shouldWriteReadHashCorrectly[1]",
        "org.springframework.data.redis.mapping.Jackson2HashMapperTests#shouldWriteReadHashCorrectly[0]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#add[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#add[raw]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#union[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#union[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#add[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#delete[Double]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#delete[String/Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#union[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#delete[Generic Jackson 2]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#add[String]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#delete[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#add[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#union[Double]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#delete[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#add[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#union[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#union[raw]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#add[String/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#delete[String]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#delete[raw]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#delete[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#delete[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#delete[Long]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#add[Double]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#union[Person/JDK]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#union[String/Person/OXM]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#add[Jackson2]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#union[String]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#add[Long]",
        "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests#union[Long]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 30
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests#testNone",
        "org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests#testExistingCol"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testIncrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpireAt[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndIncrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpire[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testAddAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testDecrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testCheckAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndDecrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndAdd[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testRename[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testIncrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpireAt[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndIncrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testAddAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpire[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testDecrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testCheckAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndDecrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndAdd[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testRename[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getThrowsExceptionWhenKeyHasBeenRemoved[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 32
    },
    {
      "className": "org.springframework.data.redis.listener.SubscriptionConnectionTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopMessageListenerContainers[0]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopMessageListenerContainers[1]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopListening[1]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopListening[0]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testRemoveLastListener[0]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testRemoveLastListener[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "org.springframework.data.redis.core.DefaultListOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[7]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 234
    },
    {
      "className": "org.springframework.data.redis.core.DefaultSetOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[8]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 99
    },
    {
      "className": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testDecrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testCheckAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testAddAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndDecrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndIncrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetExistingValue[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testIncrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndAdd[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getThrowsExceptionWhenKeyHasBeenRemoved[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndDecrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testCheckAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testAddAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndIncrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testDecrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testIncrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetExistingValue[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndAdd[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 28
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
      "failingMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zCountShouldCountValuesInRangeWithMaxExlusion[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeByScoreShouldReturnValuesCorrectlyWithMaxExclusion[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeByLex[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeByScoreShouldReturnValuesCorrectlyWithMinExclusion[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRemRangeByScoreShouldRemoveValuesCorrectlyWithPositiveInfinity[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRemShouldRemoveValuesFromSet[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeShouldReturnValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeShouldReturnValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMinExclusion[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMinExclusion[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeByScoreShouldReturnValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRemRangeByScoreShouldRemoveValuesCorrectlyWithExcludingMinRange[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeByScoreShouldReturnValuesCorrectlyWithMinExclusion[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRemRangeByScoreShouldRemoveValuesCorrectlyWithExcludingMaxRange[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRemRangeByRankShouldRemoveValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zCardShouldReturnSizeCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRankShouldReturnIndexCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeWithScoreShouldReturnTuplesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zCountShouldCountValuesInRangeWithMinExlusion[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMaxExclusion[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zCountShouldCountValuesInRangeWithNegativeInfinity[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeByScoreWithScoreShouldReturnTuplesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeWithScoreShouldReturnTuplesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeByScoreShouldReturnValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeByLex[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRemRangeByScoreShouldRemoveValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zAddShouldAddValuesWithScores[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zScoreShouldReturnScoreCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zCountShouldCountValuesInRangeWithPositiveInfinity[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRemRangeByScoreShouldRemoveValuesCorrectlyWithNegativeInfinity[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMaxExclusion[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeByScoreWithScoreShouldReturnTuplesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zInterStoreShouldWorkCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeByScoreShouldReturnValuesCorrectlyWithMaxExclusion[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRankShouldReturnIndexCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zIncrByShouldInreaseAndReturnScore[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zCountShouldCountValuesInRange[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zUnionStoreShouldWorkCorrectly[Cluster]"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeByScoreShouldReturnValuesCorrectlyWithMaxExclusion[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMaxExclusion[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zIncrByShouldInreaseAndReturnScore[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRemRangeByScoreShouldRemoveValuesCorrectlyWithNegativeInfinity[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMinExclusion[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeByScoreShouldReturnValuesCorrectlyWithMinExclusion[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeWithScoreShouldReturnTuplesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRemShouldRemoveValuesFromSet[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeByScoreShouldReturnValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zCountShouldCountValuesInRange[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRemRangeByScoreShouldRemoveValuesCorrectlyWithPositiveInfinity[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeByLex[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRemRangeByRankShouldRemoveValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeShouldReturnValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeByScoreWithScoreShouldReturnTuplesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMinExclusion[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zCountShouldCountValuesInRangeWithPositiveInfinity[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRemRangeByScoreShouldRemoveValuesCorrectlyWithExcludingMinRange[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zCountShouldCountValuesInRangeWithNegativeInfinity[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zCardShouldReturnSizeCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeByScoreShouldReturnValuesCorrectlyWithMaxExclusion[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRankShouldReturnIndexCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeByLex[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zCountShouldCountValuesInRangeWithMaxExlusion[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeByScoreShouldReturnValuesCorrectlyWithMinExclusion[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRankShouldReturnIndexCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zCountShouldCountValuesInRangeWithMinExlusion[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMaxExclusion[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRemRangeByScoreShouldRemoveValuesCorrectlyWithExcludingMaxRange[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zAddShouldAddValuesWithScores[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zScoreShouldReturnScoreCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeByScoreWithScoreShouldReturnTuplesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zUnionStoreShouldWorkCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeByScoreShouldReturnValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRangeWithScoreShouldReturnTuplesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRevRangeShouldReturnValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zInterStoreShouldWorkCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests#zRemRangeByScoreShouldRemoveValuesCorrectly[Standalone]"
      ],
      "failures": [
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        }
      ],
      "nbFailures": 38,
      "nbErrors": 38
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests",
      "failingMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests#decrByIntegerShouldDecreaseValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests#incrByIntegerShouldIncreaseValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests#decrByDoubleShouldDecreaseValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests#hIncrByIntegerShouldIncreaseValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests#hIncrByDoubleShouldIncreaseValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests#incrByDoubleShouldIncreaseValueCorrectly[Cluster]"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests#hIncrByIntegerShouldIncreaseValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests#decrByDoubleShouldDecreaseValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests#incrByDoubleShouldIncreaseValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests#decrByIntegerShouldDecreaseValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests#hIncrByDoubleShouldIncreaseValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests#incrByIntegerShouldIncreaseValueCorrectly[Standalone]"
      ],
      "failures": [
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        }
      ],
      "nbFailures": 6,
      "nbErrors": 6
    },
    {
      "className": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#testNumberOfOperationsGreaterThanNumberOfConnections",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#listOperationLPushShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#valueOperationSetShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#testNumberOfOperationsIsOne",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#testNumberOfOperationsEqualToNumberOfConnections",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#readonlyTransactionSyncShouldNotExcceedMaxConnections",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#listOperationLPushShoudBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#valueOperationShouldWorkWithReadOnlyTransactions",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#valueOperationSetShouldBeRolledBackCorrectly"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 18
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
      "failingMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#renameShouldThrowErrorWhenKeyDoesNotExit[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldPersist[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldDeleteKeysInMultipleBatchesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldPreciseExpireKeysCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#existsShouldReturnTrueForExistingKeys[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#randomKeyShouldReturnAnyKey[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldReportTimeToLiveCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#existsShouldReturnFalseForNonExistingKeys[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldExpireKeysCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#renameNXShouldNotAlterExistingKeyName[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#renameShouldAlterKeyNameCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#renameNXShouldAlterKeyNameCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldPreciseExpireAtKeysCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldExpireAtKeysCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldDeleteKeysCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldDeleteKeyCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#randomKeyShouldReturnNullWhenNoKeyExists[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldMoveToDatabase[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#keysShouldReturnCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#typeShouldReturnTypeCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldReportPreciseTimeToLiveCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldDeleteKeysInBatchCorrectly[Cluster]"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#renameShouldThrowErrorWhenKeyDoesNotExit[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldPreciseExpireKeysCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldExpireKeysCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#renameNXShouldNotAlterExistingKeyName[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#existsShouldReturnFalseForNonExistingKeys[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldReportPreciseTimeToLiveCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#randomKeyShouldReturnNullWhenNoKeyExists[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldReportTimeToLiveCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#keysShouldReturnCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#renameShouldAlterKeyNameCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#existsShouldReturnTrueForExistingKeys[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldDeleteKeysInBatchCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#renameNXShouldAlterKeyNameCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#randomKeyShouldReturnAnyKey[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldDeleteKeysCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldExpireAtKeysCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldDeleteKeyCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldDeleteKeysInMultipleBatchesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#typeShouldReturnTypeCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldPersist[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldPreciseExpireAtKeysCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests#shouldMoveToDatabase[Standalone]"
      ],
      "failures": [
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        }
      ],
      "nbFailures": 22,
      "nbErrors": 22
    },
    {
      "className": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesIndexDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#getShouldReadSimpleObjectCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putShouldCreateGeoIndexCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#getShouldReadNestedObjectCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#couldReadsKeyspaceSizeCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexListValuesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterGeoIndexCorrectlyOnDelete[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#keyExpiredEventWithoutKeyspaceShouldBeIgnored[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteRemovesEntriesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterGeoIndexCorrectlyOnUpdate[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesNestedDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesSimpleIndexDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexObjectCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteCleansIndexedDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#keyExpiredEventShouldRemoveHelperStructures[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesSimpleNestedIndexValuesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteRemovesEntriesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataOnNestedObjectPathCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveSimpleListValuesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteShouldRemoveGeoIndexCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataOnNestedObjectCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveSimpleMapValuesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexMapValuesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putShouldCreateGeoIndexCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesIndexDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#getShouldReadSimpleObjectCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#getShouldReadNestedObjectCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexListValuesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterGeoIndexCorrectlyOnDelete[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesNestedDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataOnNestedObjectPathCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#keyExpiredEventWithoutKeyspaceShouldBeIgnored[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#couldReadsKeyspaceSizeCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterGeoIndexCorrectlyOnUpdate[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesSimpleIndexDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#keyExpiredEventShouldRemoveHelperStructures[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexObjectCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesSimpleNestedIndexValuesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteCleansIndexedDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveSimpleListValuesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteShouldRemoveGeoIndexCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveSimpleMapValuesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexMapValuesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataOnNestedObjectCorrectly[0]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 48
    },
    {
      "className": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[8]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 135
    },
    {
      "className": "org.springframework.data.redis.support.collections.SupportXmlTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.SupportXmlTests#testContainerSetup"
      ],
      "failures": [
        {
          "failureName": "org.springframework.beans.factory.BeanCreationException",
          "failureDetail": "Error creating bean with name \u0027non-existing\u0027: Invocation of init method failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
      "failingMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lRemSouldRemoveAllValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lLenShouldReturnSizeCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#rPushShouldAppendValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#brPopLPushShouldWorkCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#rPopSouldRemoveFirstValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lInsertShouldAddValueCorrectlyBeforeExisting[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lRangeShouldReturnValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lIndexShouldReturnValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lRemSouldRemoveFirstValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lPushShouldPrependValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#rPushXShouldAppendValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#blPopShouldReturnFirstAvailable[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lTrimShouldReturnValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#rPopLPushShouldWorkCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#brPopShouldReturnLastAvailable[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lSetSouldSetValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lPopSouldRemoveFirstValueCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lPushXShouldPrependValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lRemSouldRemoveLastValuesCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lInsertShouldAddValueCorrectlyAfterExisting[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#pushShouldThrowErrorForMoreThanOneValueWhenUsingExistsOption[Cluster]"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#rPopSouldRemoveFirstValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lPushShouldPrependValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#pushShouldThrowErrorForMoreThanOneValueWhenUsingExistsOption[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lInsertShouldAddValueCorrectlyAfterExisting[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lRemSouldRemoveAllValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lIndexShouldReturnValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lRemSouldRemoveLastValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lTrimShouldReturnValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lInsertShouldAddValueCorrectlyBeforeExisting[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#rPushShouldAppendValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#blPopShouldReturnFirstAvailable[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#brPopShouldReturnLastAvailable[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lPushXShouldPrependValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lLenShouldReturnSizeCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lRangeShouldReturnValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#brPopLPushShouldWorkCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#rPopLPushShouldWorkCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lSetSouldSetValueCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lRemSouldRemoveFirstValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#rPushXShouldAppendValuesCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests#lPopSouldRemoveFirstValueCorrectly[Standalone]"
      ],
      "failures": [
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        }
      ],
      "nbFailures": 21,
      "nbErrors": 21
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests",
      "failingMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests#pfCountWithMultipleKeysShouldReturnCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests#pfAddShouldAddToNonExistingKeyCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests#pfCountShouldReturnCorrectly[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests#pfAddShouldReturnZeroWhenValueAlreadyExists[Cluster]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests#pfMergeShouldWorkCorrectly[Cluster]"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests#pfAddShouldReturnZeroWhenValueAlreadyExists[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests#pfAddShouldAddToNonExistingKeyCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests#pfCountWithMultipleKeysShouldReturnCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests#pfCountShouldReturnCorrectly[Standalone]",
        "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests#pfMergeShouldWorkCorrectly[Standalone]"
      ],
      "failures": [
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "com.lambdaworks.redis.RedisConnectionException",
          "failureDetail": "Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 5
    },
    {
      "className": "org.springframework.data.redis.core.RedisTemplateTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[8]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 801
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests",
      "failingMethods": [
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testCreatePassword",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testCreateInvalidPassword"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testCreateWithDbIndex",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testGetResourceValidate",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testGetResourcePoolExhausted",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testGetResource",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testReturnBrokenResource",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testReturnResource",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#poolWorksWithoutClientResources"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "Redis must have requirepass set to run this test",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "Redis must have requirepass set to run this test",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 7
    },
    {
      "className": "org.springframework.data.redis.cache.RedisCacheTest",
      "failingMethods": [
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[15]"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[0]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 108,
      "nbErrors": 216
    },
    {
      "className": "org.apache.maven.surefire.junit4.JUnit4Provider",
      "failingMethods": [],
      "erroringMethods": [
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.lettuce.LettuceConnectionPipelineIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.lettuce.LettuceConnectionPipelineTxIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jedis.JedisConnectionTransactionIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jedis.JedisConnectionPipelineIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.lettuce.LettuceConnectionIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jedis.JedisConnectionIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.lettuce.LettuceConnectionTransactionIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jedis.JedisConnectionPipelineTxIntegrationTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "org.springframework.data.redis.connection.jedis.ScanTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.jedis.ScanTests#contextLoads[1]",
        "org.springframework.data.redis.connection.jedis.ScanTests#contextLoads[0]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    }
  ],
  "bugRepo": "spring-projects/spring-data-redis"
}