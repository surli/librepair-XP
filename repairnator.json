{
  "totalNumberSkippingTests": 211,
  "step-durations": {
    "CheckoutBuild": 0,
    "": 0,
    "CloneRepository": 7,
    "ResolveDependency": 161,
    "TestProject": 697,
    "BuildProject": 76,
    "SquashRepository": 2
  },
  "workspace": "./workspace",
  "totalNumberErroringTests": 10226,
  "repo": "spring-projects/spring-data-redis",
  "bugCommit": "https://github.com/spring-projects/spring-data-redis/compare/5ca2ce627f69...49218b1a3d8f",
  "failingModule": "/root/workspace/spring-projects/spring-data-redis/220544790",
  "buildid": 220544790,
  "totalNumberFailingTests": 1,
  "error-types": [
    "org.springframework.data.redis.connection.PoolException",
    "org.junit.AssumptionViolatedException",
    "org.springframework.data.redis.RedisConnectionFailureException",
    "org.springframework.beans.factory.BeanCreationException",
    "java.lang.AssertionError",
    "java.lang.NoClassDefFoundError",
    "java.lang.ExceptionInInitializerError",
    "java.lang.Exception",
    "skipped",
    "org.jredis.ClientRuntimeException"
  ],
  "totalNumberRunningTests": 12191,
  "failing-test-cases": [
    {
      "className": "org.springframework.data.redis.core.DefaultHyperLogLogOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultHyperLogLogOperationsTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.MultithreadedRedisTemplateTests",
      "failingMethods": [
        "org.springframework.data.redis.core.MultithreadedRedisTemplateTests#assertResouresAreReleasedProperlyWhenSharingRedisTemplate[0]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "org.springframework.data.redis.core.script.srp.SrpDefaultScriptExecutorTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.script.srp.SrpDefaultScriptExecutorTests#org.springframework.data.redis.core.script.srp.SrpDefaultScriptExecutorTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.listener.SubscriptionConnectionTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopMessageListenerContainers[0]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testRemoveLastListener[2]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testRemoveLastListener[3]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopMessageListenerContainers[2]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopMessageListenerContainers[1]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopListening[2]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopListening[1]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopMessageListenerContainers[3]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopListening[3]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopListening[0]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testRemoveLastListener[0]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testRemoveLastListener[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.jredis.ClientRuntimeException",
          "failureDetail": "null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.jredis.ClientRuntimeException",
          "failureDetail": "null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.jredis.ClientRuntimeException",
          "failureDetail": "null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 12
    },
    {
      "className": "org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests#listenerShouldNotReactToDeleteEvents",
        "org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests#listenerShouldPublishEventCorrectly"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests#org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests#org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#findReturnsPageCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#findUsingOrReturnsResultCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#nearQueryShouldReturnResultsCorrectlyOnNestedProperty",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyTopKeywordCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldReturnEmptyListWhenPageableOutOfBoundsUsingQueryMethod",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#findReturnsReferenceDataCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#nearQueryShouldReturnResultsCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyPageableCorrectlyWhenUsingFindAll",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyFirstKeywordCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldReturnEmptyListWhenPageableOutOfBoundsUsingFindAll",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyPageableCorrectlyWhenUsingFindByWithoutCriteria",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#nearQueryShouldFindNothingIfOutOfRange",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyTopKeywordCorrectlyWhenCriteriaPresent",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#simpleFindShouldReturnEntitiesCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#simpleFindByMultipleProperties"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 15
    },
    {
      "className": "org.springframework.data.redis.core.DefaultListOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[9]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[9]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[9]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[9]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[9]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[9]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[9]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[9]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[9]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[9]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[9]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[0]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[9]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[8]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[9]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPush[3]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithNull[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[9]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[9]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushIfPresent[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushIfPresent[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAll[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAllCollection[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushWithPivot[9]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushAllCollection[1]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithNull[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[5]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[2]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[4]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testLeftPushAll[6]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPushWithPivot[7]",
        "org.springframework.data.redis.core.DefaultListOperationsTests#testRightPopAndLeftPushTimeout[7]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 260
    },
    {
      "className": "org.springframework.data.redis.support.BoundKeyOperationsTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.BoundKeyOperationsTest#initializationError"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.DefaultSetOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[9]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[9]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[9]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[9]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[9]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[9]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[9]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[9]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[6]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[9]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[9]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[4]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[1]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembers[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMember[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testMove[3]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRemove[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testDistinctRandomMembersNegative[2]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testPop[9]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testSSCanReadsValuesFully[0]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersNegative[7]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#intersectAndStoreShouldReturnNumberOfElementsInDestination[8]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testAdd[5]",
        "org.springframework.data.redis.core.DefaultSetOperationsTests#testRandomMembersWithDuplicates[8]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 110
    },
    {
      "className": "org.springframework.data.redis.listener.PubSubResubscribeTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.listener.PubSubResubscribeTests#org.springframework.data.redis.listener.PubSubResubscribeTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.connection.jredis.JredisPoolTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.jredis.JredisPoolTests#testCreateWithHostAndPort",
        "org.springframework.data.redis.connection.jredis.JredisPoolTests#testReturnResource",
        "org.springframework.data.redis.connection.jredis.JredisPoolTests#testGetResourcePoolExhausted",
        "org.springframework.data.redis.connection.jredis.JredisPoolTests#testReturnBrokenResource",
        "org.springframework.data.redis.connection.jredis.JredisPoolTests#testGetResource",
        "org.springframework.data.redis.connection.jredis.JredisPoolTests#testCreateWithHostPortAndDbIndex",
        "org.springframework.data.redis.connection.jredis.JredisPoolTests#testGetResourceValidate"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests#org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
      "failingMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testConnectWithPassword",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testLotsOfConnections"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetNewConnectionOnError",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testConnectionErrorNoValidate",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetConnectionNotSharedBadHostname",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetSharedConnectionNotShared",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testSelectDb",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testCreateFactoryWithPool",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testValidateNoError",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testResetAndInitConnection",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testResetConnection",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#factoryWorksWithoutClientResources",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testDisableSharedConnection",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#dbIndexShouldBePropagatedCorrectly",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testInitConnection",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetConnectionException"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "Redis must have requirepass set to run this test",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "Uncomment this test to manually check connection reuse in a pool scenario",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 14
    },
    {
      "className": "org.springframework.data.redis.listener.PubSubTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.listener.PubSubTests#org.springframework.data.redis.listener.PubSubTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisSetTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArrayWithGenerics[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnion[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIsEmpty[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiff[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testClear[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[21]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testEquals[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAddAll[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testRemoveObject[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[10]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[22]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[9]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToArray[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[23]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[11]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[26]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[7]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[16]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[28]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[0]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[3]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[17]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[29]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testAdd[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testGetKey[2]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testHashCode[5]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[25]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testToString[13]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[6]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testSize[19]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[8]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testScanWorksCorrectly[30]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[12]",
        "org.springframework.data.redis.support.collections.RedisSetTests#removeAll[24]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[14]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[27]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsObject[15]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testContainsAll[20]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIntersect[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testUnionAndStore[1]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[4]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testDiffAndStore[18]",
        "org.springframework.data.redis.support.collections.RedisSetTests#testIterator[3]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 682
    },
    {
      "className": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexType[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveAndSetItToMinusOnelIfPersisted[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdate[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexTypedList[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateShouldLeaveIndexesNotInvolvedInUpdateUntouched[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectType[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleType[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleTypedList[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#updateShouldAlterIndexesCorrectlyWhenValuesGetRemovedFromHash[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#savesObjectCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLive[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningSingleIdCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningMultipleIdsCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveToPrimitiveField[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleTypedMap[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectTypedList[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveWhenFetchingList[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectTypedMap[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningNullCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexTypedMap[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleType[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveAndSetItToMinusOnelIfPersisted[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexType[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectType[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateShouldLeaveIndexesNotInvolvedInUpdateUntouched[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleTypedList[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdate[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#updateShouldAlterIndexesCorrectlyWhenValuesGetRemovedFromHash[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningSingleIdCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningMultipleIdsCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectTypedList[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLive[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleTypedMap[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectTypedMap[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveWhenFetchingList[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#savesObjectCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexTypedList[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningNullCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexTypedMap[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveToPrimitiveField[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 80
    },
    {
      "className": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testDecrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndDecrement[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndSet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testCheckAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getThrowsExceptionWhenKeyHasBeenRemoved[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testAddAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndIncrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testIncrementAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetExistingValue[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndAdd[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndDecrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testCheckAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testAddAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndSet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getThrowsExceptionWhenKeyHasBeenRemoved[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndIncrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testDecrementAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndAdd[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testIncrementAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetExistingValue[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testCheckAndSet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testAddAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndDecrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testDecrementAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndIncrement[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetExistingValue[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testIncrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndAdd[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getThrowsExceptionWhenKeyHasBeenRemoved[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndDecrement[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testCheckAndSet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testAddAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndIncrement[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testDecrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testIncrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetExistingValue[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndAdd[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 56
    },
    {
      "className": "org.springframework.data.redis.connection.srp.SrpConnectionFactoryTests",
      "failingMethods": [
        "org.springframework.data.redis.connection.srp.SrpConnectionFactoryTests#testConnectWithPassword"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.connection.srp.SrpConnectionFactoryTests#testConnect"
      ],
      "failures": [
        {
          "failureName": "skipped",
          "failureDetail": "Redis must have requirepass set to run this test",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
      "failingMethods": [
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSaveXml[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoadXml[19]"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentRemove[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullValue[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutAll[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPut[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetProperty[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementNotNumber[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSize[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEntrySet[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrement[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testClear[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testSetProperty[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIncrementDouble[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsKey[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testKeySet[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceOneArg[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesList[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[10]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[0]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testHashCode[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[17]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[11]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[1]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[16]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[20]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesSave[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemoveNullValue[29]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[14]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[12]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullOldValue[30]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[9]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[21]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[19]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[6]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[4]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testEquals[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[2]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testScanWorksCorrectly[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testStringPropertyNames[15]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testReplaceNullNewValue[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[31]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetOperations[13]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testDefaultInit[26]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testContainsValue[3]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testNotEquals[25]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetKey[23]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[24]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testIsEmpty[8]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertyNames[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testRemove[22]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGetPropertyDefault[18]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPropertiesLoad[27]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testValues[5]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testGet[28]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testPutIfAbsent[7]",
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#testConcurrentReplaceTwoArgs[3]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 64,
      "nbErrors": 1216
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#valueOperationSetShouldBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#listOperationLPushShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#listOperationLPushShoudBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#valueOperationSetShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#valueOperationShouldWorkWithReadOnlyTransactions"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#testNumberOfOperationsGreaterThanNumberOfConnections",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#listOperationLPushShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#valueOperationSetShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#testNumberOfOperationsIsOne",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#testNumberOfOperationsEqualToNumberOfConnections",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#readonlyTransactionSyncShouldNotExcceedMaxConnections",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#listOperationLPushShoudBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#valueOperationShouldWorkWithReadOnlyTransactions",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#valueOperationSetShouldBeRolledBackCorrectly"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 18
    },
    {
      "className": "org.springframework.data.redis.core.DefaultHashOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testHScanReadsValuesFully[1]",
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testDelete[0]",
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testEntries[0]",
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testDelete[1]",
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testEntries[1]",
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testHScanReadsValuesFully[0]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
      "failingMethods": [
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[3]"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[0]"
      ],
      "failures": [
        {
          "failureName": "skipped",
          "failureDetail": "DATAREDIS-108 Test is intermittently failing",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "DATAREDIS-108 Test is intermittently failing",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "DATAREDIS-108 Test is intermittently failing",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "DATAREDIS-108 Test is intermittently failing",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        }
      ],
      "nbFailures": 4,
      "nbErrors": 52
    },
    {
      "className": "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#valueOperationSetShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#listOperationLPushShoudBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#valueOperationSetShouldBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#listOperationLPushShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#valueOperationShouldWorkWithReadOnlyTransactions"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisMapTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGet[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsValue[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutAll[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementNotNumber[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testNotEquals[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testContainsKey[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrementDouble[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceTwoArgs[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[16]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[15]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[17]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[34]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[7]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[10]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[24]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullValue[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[14]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[27]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullNewValue[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[35]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[11]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[8]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[32]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[18]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEntrySet[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[33]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[23]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[28]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[5]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testReplaceNullOldValue[19]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testClear[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[0]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[2]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[21]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[26]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[22]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testValues[29]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testKeySet[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPutIfAbsent[4]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetOperations[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIncrement[12]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentReplaceOneArg[13]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testScanWorksCorrectly[30]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testIsEmpty[6]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemoveNullValue[1]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testHashCode[3]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testRemove[20]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testPut[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testEquals[25]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testSize[9]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testConcurrentRemove[31]",
        "org.springframework.data.redis.support.collections.RedisMapTests#testGetKey[21]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1044
    },
    {
      "className": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesIndexDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#getShouldReadSimpleObjectCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putShouldCreateGeoIndexCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#getShouldReadNestedObjectCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#couldReadsKeyspaceSizeCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexListValuesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterGeoIndexCorrectlyOnDelete[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#keyExpiredEventWithoutKeyspaceShouldBeIgnored[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteRemovesEntriesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterGeoIndexCorrectlyOnUpdate[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesNestedDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesSimpleIndexDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexObjectCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteCleansIndexedDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#keyExpiredEventShouldRemoveHelperStructures[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesSimpleNestedIndexValuesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteRemovesEntriesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataOnNestedObjectPathCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveSimpleListValuesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteShouldRemoveGeoIndexCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataOnNestedObjectCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveSimpleMapValuesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexMapValuesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putShouldCreateGeoIndexCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesIndexDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#getShouldReadSimpleObjectCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#getShouldReadNestedObjectCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexListValuesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterGeoIndexCorrectlyOnDelete[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesNestedDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataOnNestedObjectPathCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#keyExpiredEventWithoutKeyspaceShouldBeIgnored[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#couldReadsKeyspaceSizeCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterGeoIndexCorrectlyOnUpdate[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesSimpleIndexDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#keyExpiredEventShouldRemoveHelperStructures[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexObjectCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesSimpleNestedIndexValuesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteCleansIndexedDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveSimpleListValuesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteShouldRemoveGeoIndexCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveSimpleMapValuesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexMapValuesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataOnNestedObjectCorrectly[0]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 48
    },
    {
      "className": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[9]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[9]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[9]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[9]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[9]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[9]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[9]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[9]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[9]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[9]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[9]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[9]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[4]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[9]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[0]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreWithScoresOffsetCount[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testIncrementScore[6]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRemove[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#zCardRetrievesDataCorrectly[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[1]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#sizeRetrievesDataCorrectly[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreWithScoresOffsetCount[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByScoreOffsetCount[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testReverseRangeByScoreOffsetCount[7]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testZScanShouldReadEntireValueRange[9]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testCount[8]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnboundedWithLimit[5]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testAddMultiple[9]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBoundedWithLimit[2]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexUnbounded[3]",
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#testRangeByLexBounded[8]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 150
    },
    {
      "className": "org.springframework.data.redis.support.collections.SupportXmlTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.SupportXmlTests#testContainerSetup"
      ],
      "failures": [
        {
          "failureName": "org.springframework.beans.factory.BeanCreationException",
          "failureDetail": "Error creating bean with name \u0027non-existing\u0027: Invocation of init method failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests#valueOperationSetShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests#valueOperationSetShouldBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests#listOperationLPushShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests#listOperationLPushShoudBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests#valueOperationShouldWorkWithReadOnlyTransactions"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.springframework.data.redis.core.DefaultValueOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[2]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeys[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpirationWithTimeUnitMilliseconds[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsent[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetWithExpiration[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetIfAbsent[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementDouble[5]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testDeserializeKey[6]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetRange[3]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testRawKeysCollection[7]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSet[4]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testIncrementLong[0]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testMultiSetIfAbsentFailure[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetRange[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSize[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetSet[9]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testSetAndGetBit[8]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testAppend[1]",
        "org.springframework.data.redis.core.DefaultValueOperationsTests#testGetAndSet[3]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 339
    },
    {
      "className": "org.springframework.data.redis.core.DefaultGeoOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultGeoOperationsTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.RedisTemplateTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullRedisCallback[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRenameIfAbsent[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireMillisNotSupported[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireMillisNotSupported[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireNoTimeUnit[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireMillisNotSupported[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDeleteMultiple[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRename[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTx[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireMillisNotSupported[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSort[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireMillisNotSupported[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testTemplateNotInitialized[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireMillisNotSupported[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireMillisNotSupported[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecCustomSerializer[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyExistButHasNoAssociatedExpire[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDelete[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireMillisNotSupported[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedTxCustomSerializer[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireMillisNotSupported[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRandomKey[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingPipelining[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireMillisNotSupported[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedCustomSerializer[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testPersist[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testKeys[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecConversionDisabled[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAtMillisNotSupported[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testType[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisUsingTransactions[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testUnwatch[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisForKeyDoesNotExist[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortStore[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testRestoreTtl[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAt[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecuteScriptCustomSerializers[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testConvertAndSend[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExpireAndGetExpireMillis[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[1]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[2]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillisNotSupported[9]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatchMultipleKeys[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testSortBulkMapper[7]",
        "org.springframework.data.redis.core.RedisTemplateTests#testStringTemplateExecutesWithStringConn[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireMillis[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSeconds[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExec[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testWatch[5]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[6]",
        "org.springframework.data.redis.core.RedisTemplateTests#testGetExpireSecondsForKeyDoesNotExist[4]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelined[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#clientListShouldReturnCorrectly[3]",
        "org.springframework.data.redis.core.RedisTemplateTests#testExecutePipelinedNonNullSessionCallback[8]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDumpAndRestoreNoTtl[0]",
        "org.springframework.data.redis.core.RedisTemplateTests#testDiscard[8]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 910
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisZSetTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScore[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testHashCode[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddWithScore[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIsEmpty[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBounded[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testClear[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScore[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testDefaultScore[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArrayWithGenerics[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testUnionAndStore[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveByScore[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLast[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIntersectAndStore[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirstException[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[21]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[9]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testFirst[20]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testLastException[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsAll[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[26]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[16]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[0]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[15]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[18]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[28]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[14]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[4]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRange[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[23]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[11]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRange[12]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[7]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#removeAll[17]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testGetKey[29]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeWithScores[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScoreWithScores[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAdd[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testContainsObject[5]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnbounded[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRank[19]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeByScoreWithScores[6]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemove[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexUnboundedWithLimit[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testScanWorksCorrectly[13]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToArray[3]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testAddAll[10]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRemoveObject[27]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByScore[30]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testReverseRangeWithScores[8]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testEquals[1]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testToString[22]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRangeByLexBoundedWithLimit[25]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testSize[24]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testRank[2]",
        "org.springframework.data.redis.support.collections.RedisZSetTests#testIterator[5]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1302
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisListTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddFirst[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#removeAll[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutFirst[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferLast[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testClear[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekLast[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddLast[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTake[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testLast[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollectionWithMaxElements[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetFirst[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPoll[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArrayWithGenerics[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDescendingIterator[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeek[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testCappedCollection[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemainingCapacity[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeLast[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIterator[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testEquals[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIndexOfObject[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionMiddle[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTrim[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testDrainToCollection[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSet[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testSize[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionTail[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testGetKey[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLast[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsAll[30]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testHashCode[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirst[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToArray[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectHead[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveObject[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#addAllIndexCollectionHead[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollTimeout[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOffer[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRange[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testToString[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollFirst[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPollLastTimeout[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectMiddle[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRmoveLastOccurrence[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[10]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPut[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[1]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[0]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[11]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[12]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPutLast[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[13]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[26]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[14]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[20]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[19]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[15]",
        "org.springframework.data.redis.support.collections.RedisListTests#testTakeFirst[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testElement[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[4]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[24]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[28]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[5]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[22]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[7]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[23]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[16]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[18]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveLast[29]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[3]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPeekFirst[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveIndex[9]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddAll[25]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAdd[27]",
        "org.springframework.data.redis.support.collections.RedisListTests#testContainsObject[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testIsEmpty[21]",
        "org.springframework.data.redis.support.collections.RedisListTests#testPop[6]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemoveFirstOccurrence[17]",
        "org.springframework.data.redis.support.collections.RedisListTests#testAddIndexObjectTail[8]",
        "org.springframework.data.redis.support.collections.RedisListTests#testOfferFirst[2]",
        "org.springframework.data.redis.support.collections.RedisListTests#testRemove[19]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3534
    },
    {
      "className": "org.springframework.data.redis.mapping.Jackson2HashMapperTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.mapping.Jackson2HashMapperTests#shouldWriteReadHashCorrectly[1]",
        "org.springframework.data.redis.mapping.Jackson2HashMapperTests#shouldWriteReadHashCorrectly[0]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests",
      "failingMethods": [
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testCreatePassword",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testCreateInvalidPassword"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testCreateWithDbIndex",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testGetResourceValidate",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testGetResourcePoolExhausted",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testGetResource",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testReturnBrokenResource",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testReturnResource",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#poolWorksWithoutClientResources"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "Redis must have requirepass set to run this test",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "Redis must have requirepass set to run this test",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 7
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests#testNone",
        "org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests#testExistingCol"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "org.springframework.data.redis.cache.RedisCacheTest",
      "failingMethods": [
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[13]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[3]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[1]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[5]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[11]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[17]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[15]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[17]"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testNativeCache[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[12]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#putIfAbsentShouldSetValueOnlyIfNotPresent[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnNullIfNoCachedValueFound[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[16]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullWithStoredNull[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[19]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[8]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronized[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[0]",
        "org.springframework.data.redis.cache.RedisCacheTest#testConcurrentRead[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[18]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[10]",
        "org.springframework.data.redis.cache.RedisCacheTest#testGetWhileClear[6]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullNotAllowingNull[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldRetunInstanceOfCorrectType[7]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldRemoveKeyIfExists[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheName[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldNotAddStuffToRedis[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheClear[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldThrowExceptionOnInvalidType[9]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCachePut[4]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetSynchronizedNullAllowingNull[2]",
        "org.springframework.data.redis.cache.RedisCacheTest#cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[14]",
        "org.springframework.data.redis.cache.RedisCacheTest#testCacheGetShouldReturnCachedInstance[0]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 126,
      "nbErrors": 234
    },
    {
      "className": "org.apache.maven.surefire.junit4.JUnit4Provider",
      "failingMethods": [],
      "erroringMethods": [
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.lettuce.LettuceConnectionPipelineIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.srp.SrpConnectionIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jedis.JedisConnectionTransactionIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jedis.JedisConnectionPipelineIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.lettuce.LettuceConnectionIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.srp.SrpConnectionTransactionIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jedis.JedisConnectionPipelineTxIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.lettuce.LettuceConnectionPipelineTxIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.srp.SrpConnectionPipelineTxIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jedis.JedisConnectionIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.lettuce.LettuceConnectionTransactionIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.srp.SrpConnectionPipelineIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jredis.JRedisConnectionIntegrationTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 13
    },
    {
      "className": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testIncrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpireAt[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndIncrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpire[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testAddAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testCheckAndSet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testDecrementAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndDecrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndAdd[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testRename[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpireAt[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testAddAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpire[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testCheckAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndIncrement[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testDecrementAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndDecrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testRename[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndAdd[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getThrowsExceptionWhenKeyHasBeenRemoved[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testIncrementAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpireAt[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndSet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testAddAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpire[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndDecrement[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testDecrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndIncrement[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testCheckAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testRename[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndAdd[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testIncrementAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getThrowsExceptionWhenKeyHasBeenRemoved[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testIncrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpireAt[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndSet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndIncrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testAddAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpire[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndDecrement[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getThrowsExceptionWhenKeyHasBeenRemoved[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testCheckAndSet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testDecrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndAdd[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testRename[0]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 64
    },
    {
      "className": "org.springframework.data.redis.connection.jedis.ScanTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.jedis.ScanTests#contextLoads[1]",
        "org.springframework.data.redis.connection.jedis.ScanTests#contextLoads[0]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    }
  ],
  "bugRepo": "spring-projects/spring-data-redis"
}